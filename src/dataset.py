'''
dataset.py

This module prepares the dataset for training
'''

import concurrent.futures
import os

from utilities import get_data_directory, extract_manifest
from encoder import Encoder, extract_singlefile
from permission_vector import extract_permissions

def make_apk_vector(filename, pscout_location, extract_manifest_file=False, is_malware=False):
    '''
    this function converts an apk to a vector that can be feed into
    a classifier
    '''

    used_function = extract_singlefile(filename, dump=False)
    api_vectors   = Encoder(used_function, pscout_location).encode()

    if extract_manifest_file:
        destination = extract_manifest(filename, is_malware=is_malware)

        if not (destination is None):
            permission_v     = extract_permissions(destination)

            permission_v_int = permission_v.to_int_vector()

            permission_v_int.extend(api_vectors)

            permission_v_int.append(1 if is_malware else 0)
            return permission_v_int
        
    return api_vectors

def make_apk_vector_folder(folder, pscout_location, extract_manifest_file=False, is_malware=False):
    '''
    this function iterates through the folder and extract the vector for all of them
    '''
    overall = []

    all_files      = []

    for root, _, files in os.walk(folder):
        for file in files:
            all_files.append(os.path.join(root, file))
     
    # extract_option = [extract_manifest_file for _ in range(len(all_files))]
    # pscouts        = [pscout_location for _ in range(len(all_files))]
    # malware_option = [is_malware for _ in range(len(all_files))]

    results = []

    with concurrent.futures.ThreadPoolExecutor(max_workers=30) as executor:
        for members in all_files:
            results.append(executor.submit(make_apk_vector, members, pscout_location, extract_manifest_file, is_malware))

    for res in results:
        overall.append(res.result())
    # for root, _, files in os.walk(folder):
    #     for file in files:
    #         full_name = os.path.join(root, file)
            # overall.append(make_apk_vector(full_name, pscout_location, extract_manifest_file=extract_manifest_file, is_malware=is_malware))
    
    return overall

def default_friendly_and_malware():
    '''
    sample for dumpy friendly and malware
    '''
    friendly_apks = get_data_directory("friendly_apk")
    malware_apks  = get_data_directory("malware_apk")

    pscout_in = get_data_directory("training_data", "API_22", "API_22_parsed_api.csv")

    friendly = make_apk_vector_folder(friendly_apks, pscout_in, extract_manifest_file=True, is_malware=False)
    malware  = make_apk_vector_folder(malware_apks,  pscout_in, extract_manifest_file=True, is_malware=True)

    dump_to = get_data_directory("training_data", "API_22", "API_22_training.txt")

    np.savetxt(dump_to, friendly + malware)

if __name__ == "__main__":
    default_friendly_and_malware()
    # r = make_apk_vector("/Users/jeromemao/Desktop/EECS600/project/data/friendly_apk/1000_com.activefrequency.android.rockout.apk",
    # "/Users/jeromemao/Desktop/EECS600/project/data/training_data/API_22/API_22_parsed_api.csv",
    # extract_manifest_file=True,
    # is_malware=False)
    # make_apk_vector_folder("/Users/jeromemao/Desktop/EECS600/project/data/friendly_apk", "")




