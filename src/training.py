'''
training.py

This trains the model to identify whether it is
a malware
'''
import pickle
import warnings

import numpy as np

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import Perceptron
from sklearn.neural_network import MLPClassifier
from sklearn.ensemble import BaggingClassifier
from sklearn.neighbors import KNeighborsClassifier

with warnings.catch_warnings():
    warnings.simplefilter("ignore")
    from sklearn.cross_validation import KFold, cross_val_score

from utilities import get_data_directory

def training_model(API_level=22, 
                   dump_model=True,
                   load_model=False,
                   model_location=None, 
                   feature_selection="All", 
                   model_name="Random Forest", **model_param):

    if load_model:
        assert not (model_location is None), "You have to tell where is the <pickled> models"

    data_path = get_data_directory("training_data", "API_{}".format(API_level), 
    "API_{}_training_final.txt".format(API_level))

    huge_data = np.loadtxt(data_path)

    if feature_selection == "All":
        X = huge_data[:, :-1]

    elif feature_selection == "Permission Only":
        X = huge_data[:, :150]
    
    elif feature_selection == "API Only":
        X = huge_data[:, 150:-1]

    y = huge_data[:, -1]

    k_fold = KFold(len(y), n_folds=10, shuffle=True, random_state=0)

    if not load_model:
        if model_name == "Random Forest":
            clf = RandomForestClassifier(**model_param)

        elif model_name == "Neural Network":
            clf = MLPClassifier(**model_param)
    else:
        with open(model_location, "rb") as pickle_can:
            clf = pickle.load(pickle_can)

    score_list = cross_val_score(clf, X, y, cv=k_fold, n_jobs=1)

    print("Accuracy : {:.2%} (+/-{:.2%})".format(np.mean(score_list), np.std(score_list)))

    if dump_model:
        clf.fit(X, y)

        pickle_to = get_data_directory("training_data", "API_{}".format(API_level), 
        "API_{}_{}".format(API_level, model_name))

        with open(pickle_to, "wb") as pickle_can:
            pickle.dump(clf, pickle_can)
    
    return clf

if __name__ == "__main__":
    training_model(feature_selection="All")




