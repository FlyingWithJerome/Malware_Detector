'''
main.py

This includes the entry of the program
'''
import argparse
import csv
import os.path

from dataset   import make_apk_vector
from training  import get_classifier, make_prediction, training_model
from utilities import get_data_directory

def parse_arguments():
    parser = argparse.ArgumentParser(description='Permission Based Malware Detector')

    parser.add_argument('input_apk_path', type=str, nargs=1, help='path to the input apk file')
    parser.add_argument("API_level", type=int, nargs=1, default=22, help="version of Android SDK")
    parser.add_argument('retrain', type=str, nargs=1, default="noretrain", help="whether to retrain the model")
    parser.add_argument('model name', type=str, nargs='?', default="Random_Forest", help="the name for the classifier")
    parser.add_argument('feature type', type=str, nargs='?', default="All", help="the feature selection policy")

    args = parser.parse_args()
    args = vars(args)

    arguments =\
    {
        "input_path" : args["input_apk_path"][0],
        "API_level"  : args["API_level"][0],
        "retrain"    : not args["retrain"][0].startswith("no"),
        "model_name" : args["model name"],
        "feature"    : args["feature type"]
    }

    return arguments
    # assert

def main():

    argument = parse_arguments()
    apk_path = argument["input_path"]
    # "/Users/jeromemao/Desktop/EECS600/project/data/friendly_apk/1000_com.activefrequency.android.rockout.apk"
    api_lvl = argument["API_level"]
    pscout_in = get_data_directory("training_data", "API_{}".format(api_lvl), "API_{}_parsed_api.csv".format(api_lvl))
    
    vector = make_apk_vector(apk_path, pscout_in, extract_manifest_file=True)

    if argument["retrain"]:
        training_model(feature_selection=argument["feature"])

    classifier = get_classifier(API_lvl=api_lvl, classfier_type=argument["model_name"])

    result = make_prediction(classifier, vector[:-1])

    print("\n---------------Results for {:40}---------------\n".format(os.path.basename(apk_path)))

    print("{:20} : {} (0=NOT malware, 1=malware)".format("Prediction Result", result["Prediction Result"][0]))
    print("{:20} : {} (Combined with the result above)".format("Actual Value", result["Confidential Interval"][0]))


if __name__ == "__main__":
    main()




